<?php

namespace Voodoo\Doll\Auth;

/**
 * Test class for User.
 * Generated by PHPUnit on 2014-02-12 at 22:57:17.
 */
class UserTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var User
     */
    protected $object;
    protected $email = "my@email.com";
    protected $email2 = "my@email2.com";
    protected $password = "mypassword";
    protected $authProvider = "twitter";
    protected $authId = 1234;
    
    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new User;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        $this->object->delete(true);
    }

    public function userProvider()
    {
        (new User)->delete(true);
        return [[(new User)->createWithEmail($this->email2, $this->password)]];
    }
    
    
    public function testCreateWithEmail() {
        $newUser = $this->object->createWithEmail($this->email, $this->password);
        $this->assertEquals($newUser->email, $this->email);
    }
    
    public function testFindByEmail() {
        $this->object->createWithEmail($this->email, $this->password);
        $user = $this->object->findByEmail($this->email);
        $this->assertEquals($user->email, $this->email);
    }
    
    public function testFindByOAuth() {
        $this->object->createWithOAuth($this->authProvider, $this->authId);
        $user = $this->object->findByOAuth($this->authProvider, $this->authId);
        $this->assertEquals($this->authId, $user->getOAuthUID($this->authProvider));
    }
    
    public function testLoginWithEmail() {
        try {
            $this->assertInstanceOf('User', $this->object->loginWithEmail($this->email, $this->password));
        } catch (Exception $e) {
            $this->assertInstanceOf('Exception', $e);
        }
        $this->object->createWithEmail($this->email, $this->password);
        $login = $this->object->loginWithEmail($this->email, $this->password);
        $this->assertEquals($login->email, $this->email);
    }


    public function testCreateWithOAuth() {
        $newUser = $this->object->createWithOAuth($this->authProvider, $this->authId);
        $this->assertEquals($this->authId, $newUser->getOAuthUID($this->authProvider));
    }
    
    public function testLoginWithOAuth() {
        $this->object->createWithOAuth($this->authProvider, $this->authId);
        $login = $this->object->loginWithOAuth($this->authProvider, $this->authId);
        $this->assertEquals($this->authId, $login->getOAuthUID($this->authProvider));
    }

    /**
     * @dataProvider userProvider
     */
    public function testResetPassword($user) {
        $this->assertEquals(8, strlen($user->resetPassword()));
    }

    /**
     * @dataProvider userProvider
     */
    public function testChangePassword($user) {
        $newPW = "my-new-pw";
        $user->changePassword($newPW);
        $this->assertTrue($user->passwordMatch($newPW));
    }

    /**
     * @dataProvider userProvider
     */
    public function testChangeEmail($user) {
        $email = "newe@ya.com";
        $user->changeEmail($email);
        $this->assertEquals($email, $user->email);
    }
    /**
     * @dataProvider userProvider
     */
    public function testSetOAuthToken($user) {
        $provider = "facebook";
        $token = "TOKEN";
        $secret = "SECRET";
        $user->setOAuthToken($provider, $token, $secret);
        $this->assertEquals($token, $user->getOAuthToken($provider)["token"]);
        $this->assertEquals($secret, $user->getOAuthToken($provider)["token_secret"]);
    }

    /**
     * @dataProvider userProvider
     */
    public function testSetOAuth($user) {
        $provider = "facebook";
        $id = 4638;
        $user->setOAuthUID($provider, $id);
        $this->assertEquals($id, $user->getOAuthUID($provider));
    }

    /**
     * @dataProvider userProvider
     */
    public function testSetScreenName($user) {
        $sn = "redbull145";
        $user->setScreenName($sn);
        $this->assertEquals($sn, $user->getScreenName());
    } 
    
    /**
     * @dataProvider userProvider
     */
    public function testSetOAuthTwitterScreenName($user) {
        $sn = "redbull";
        $user->setOAuthTwitterScreenName($sn);
        $this->assertEquals($sn, $user->getOAuthTwitterScreenName());
    }

    /**
     * @dataProvider userProvider
     */
    public function testHasOAuth($user) {
        $provider = "facebook";
        $id = 4638;
        $user->setOAuthUID($provider, $id);
        $this->assertTrue($user->hasOAuth($provider));
    }

    /**
     * @dataProvider userProvider
     */
    public function testEmailExists($user) {
        $this->assertTrue($this->object->emailExists($user->email));
    }

    /**
     * @dataProvider userProvider
     */
    public function testPasswordMatch($user) {
        $this->assertTrue($user->passwordMatch($this->password));
    }

    /**
     * @dataProvider userProvider
     */    
    public function testDefaultOAuthProvider($user) {
        $user->setDefaultOAuthProvider($this->authProvider);
        $this->assertEquals($this->authProvider, $user->getDefaultOAuthProvider());
    }
    
    /**
     * @dataProvider userProvider
     */
    public function testSetRequirePasswordChange($user) {
        $user->resetPassword();
        $this->assertTrue($user->requirePasswordChange());
        $user->changePassword("jkfghwgfogwrglhl");
        $this->assertFalse($user->requirePasswordChange());
        
        $user->setRequirePasswordChange(true);
        $this->assertTrue($user->requirePasswordChange());
        $user->setRequirePasswordChange(false);
        $this->assertFalse($user->requirePasswordChange());        
    }

    /**
     * @dataProvider userProvider
     */    
    public function testAccessLevel($user)
    {
        $user->setAccessLevel(4);
        $this->assertEquals(4, $user->getAccessLevel());
    }
}

?>
